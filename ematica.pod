##                         -*- Mode: Indented-Text -*- 
## Mathematica.pod -- 
## ITIID           : $ITI$ $Header $__Header$
## Author          : Ulrich Pfeifer
## Created On      : Fri Nov 24 10:32:16 1995
## Last Modified By: Ulrich Pfeifer
## Last Modified On: Mon Mar 25 22:22:35 1996
## Language        : Pod
## Update Count    : 11
## Status          : Unknown, Use with caution!
## 
## (C) Copyright 1995, Universität Dortmund, all rights reserved.
## 
## $Locker: pfeifer $
## $Log: ematica.pod,v $
## Revision 1.0.1.3  1996/03/25 21:22:42  pfeifer
## patch6: Renamed package to Math::ematica.
##
## Revision 1.0.1.2  1995/11/24  16:17:39  pfeifer
## patch5: Fixed documentation for Call();
##
## Revision 1.0.1.1  1995/11/24  10:26:20  pfeifer
## patch4: Basic documentation.
##
## 

=head1 NAME

Math::ematica - Communicate to Mathematica via B<MathLink>

=head1 SYNOPSIS

C<use Math::ematica;>

C<$link = new Math::ematica(> I<MathLink args> C<)>

=head1 DESCRIPTION

This is a very basic interface to the B<MathLink> library of
Mathematica. B<Mathematica> is registered trademark of Wolfram
Research, Inc. I use version 2.2. There are tree groups of functions:

=head2 As-Is functions

Some functions have the same interface as in MathLink itself. For
example

        int MLPutSymbol(MLINK, char*);

Can be called from Perl like:

        Math::ematica::PutSymbol($link,"FooBar");

I recommend to use the OO-Syntax:

        $link->PutSymbol("FooBar");

=head2 More perlish functions

There are a couple of functions in MathLink which return a error code
and deliver results via reference parameters.

    
        int MLGetSymbol(MLINK, char**);

the Perl versions of these functions return the result as result of
the function. If the return code of the MathLink function indicates an
error, C<undef> is returned instead. You can use C<defined> to
disambiguate C<undef> and 0 for functions returning numeric values.

        if (defined($result = $link->GetSymbol)) {
           ....
        }

=head2 Convenience functions

In C<Mathematica.pm> there are few functions to support OO-style
syntax.

=over 5

=item C<new>

Is an alias for C<open>. It takes a list of named arguments as the
C<math> of Mathematica program does. To use launch mode use e.g.:

    $link = new Math::ematica('-linkname', "math  -mathlink", 
                              '-linkmode', 'launch');

If you want to connect over TCP enter the following line in a shell to
start the server
    
    math -linkmode listen -linkprotocol TCP -linkname 3000 -mathlink

and use this in your script to connect:

    $link = new Math::ematica('-linkname', '3000', 
                              '-linkmode', 'Connect',
                              '-linkhost', 'schroeder',
                              '-linkprotocol', 'TCP',
                              );

=item C<DESTROY>

Is an alias For C<Close>. So you do not need to close a connection -
Perl will do it for you.

=item C<Call>

Takes a list of arguments. The first is assumed to be a Mathematica
function name, the rest the arguments to pass to
Mathematica. depending on the argument different actions are
performed:

=over 5

=item 

If the argument is enclosed in single or double quotes, C<PutString>
is called.

=item

If the arguments starts not with a digit, a '+' or '-', or with a '.'
it is assumed to be a symbol and C<PutSymbol> is called.

=item

If the argument is an array reference, C<Call> is recursively invoked
with the referenced array as arguments.

=item

In all other cases C<PutDouble> is called.

Perhaps the following examples helps to clarify this:

        $link->Call('N', ['Exp',1], 20);

        $link->Call('Needs', '"Statistics`ContinuousDistributions`"');

        $link->Call('Table', 
                       ['CDF', ['NormalDistribution', 0, 1], 'i'],
                       ['List', 'i', 0, 1, 0.1]);

=item C<Result>

Looks for a result from Mathematica and returns it. Caution this
function just handles the most frequent cases. It dies if it runs in
an unknown case ;-(

        $link->PutSymbol('$Version');
        $link->EndPacket();
        $version = $link->Result();

=back

=head1 BUGS

Doubless many.

Not all MathLink functions are supported yet.

The tests complain about acessing uninitialized values when testing
the arguments for references:

    if (ref($_) eq 'ARRAY') ...

This seems to be a bug of my perl version rather than one of
C<PutCall>.

=head1 Contribute

That is it for now. Let me know if somebody uses this (1) and is
willing to test (2) or to contribute (3). The latter is preferred ;-)

=head1 AUTHOR

Ulrich Pfeifer F<E<lt>pfeifer@ls6.informatik.uni-dortmund.deE<gt>>


